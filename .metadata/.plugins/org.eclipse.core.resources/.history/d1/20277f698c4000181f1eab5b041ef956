package com.wangjun.leetcode;

import java.util.ArrayList;
import java.util.List;

/*
给定一个二叉树，检查它是否是它自己的镜像（即，围绕它的中心对称）。
例如，这个二叉树 [1,2,2,3,4,4,3] 是对称的。
 */
public class LeetCode13 {

	public static void main(String[] args) {

	}

	public boolean isSymmetric(TreeNode1 root) {
		List<Integer> list1 = new ArrayList<>();
		List<Integer> list2 = new ArrayList<>();
		scanDLR(list1, root);
		scanDRL(list2, root);
		for(int i = 0; i < list1.size(); i++) {
			if(list1.get(i) == null && list2.get(i) == null) {
				continue; 
			}
			if(list1.get(i) == null || list2.get(i) == null) {
				return false;
			}
			if(!list1.get(i).equals(list2.get(i))) {
				return false;
			}
		}
		return true;
	}

	public void scanDLR(List<Integer> list, TreeNode1 treeNode) {
		if(null == treeNode) {
			list.add(null);
			return;
		}
		list.add(treeNode.val);
		scanDLR(list, treeNode.left);
		scanDLR(list, treeNode.right);
	}
	
	public void scanDRL(List<Integer> list, TreeNode1 treeNode) {
		if(null == treeNode) {
			list.add(null);
			return;
		}
		list.add(treeNode.val);
		scanDRL(list, treeNode.right);
		scanDRL(list, treeNode.left);
	}

}

class TreeNode1 {
	int val;
	TreeNode1 left;
	TreeNode1 right;

	TreeNode1(int x) {
		val = x;
	}
}