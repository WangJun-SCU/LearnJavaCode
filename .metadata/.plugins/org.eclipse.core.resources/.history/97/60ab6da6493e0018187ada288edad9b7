package com.wangjun.othersOfJava;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class 线程池 {

	public static void main(String[] args) {
		//创建容量为6的线程池
		ExecutorService es = Executors.newFixedThreadPool(6);
		//向线程池提交两个线程
		es.submit(new PoolThreadTest());
		es.submit(new PoolThreadTest());
		//提交有返回值的线程，返回值为submit的第二个参数"f1"
		Future<String> f1 = es.submit(new PoolThreadTest(), "f1");
		try {
			//打印返回值
			System.out.println(f1.get());
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (ExecutionException e) {
			e.printStackTrace();
		}
		//提交Callable对象，带有返回值
		//关闭线程池
		es.shutdown();
		//es.submit(new PoolThreadTest());
		
	}

}
class PoolThreadTest implements Runnable {
	@Override
	public void run() {
		for(int i = 0; i < 10; i++) {
			try {
				Thread.sleep(500);
				System.out.println("ThreadName:" + Thread.currentThread().getName() + ",i:" + i);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
}
class PoolThreadTest2 implements Callable {
	@Override
	public Object call() throws Exception {
		return null;
	}
}
